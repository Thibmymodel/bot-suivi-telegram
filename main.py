import os
import io
import re
import json
import shutil
import logging
import datetime
from PIL import Image, ImageOps
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from fastapi import FastAPI
from contextlib import asynccontextmanager
from telegram import Update, Bot, Message
from telegram.ext import Application, ContextTypes, MessageHandler, filters
import pytesseract
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import httpx
import asyncio
import threading

# --- LOGS ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- ENV ---
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
RAILWAY_URL = os.getenv("RAILWAY_PUBLIC_URL", "http://localhost:8000").rstrip("/")
GROUP_ID = int(os.getenv("TELEGRAM_GROUP_ID"))
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
logger.info(f"üîë BOT_TOKEN: {'PR√âSENT' if BOT_TOKEN else 'ABSENT'}")
logger.info(f"üîë RAILWAY_URL: {RAILWAY_URL}")
logger.info(f"üîë GROUP_ID: {GROUP_ID}")
logger.info(f"üîë SPREADSHEET_ID: {SPREADSHEET_ID}")

# --- TELEGRAM ---
telegram_app = Application.builder().token(BOT_TOKEN).build()
bot = telegram_app.bot
telegram_ready = asyncio.Event()

# --- TESSERACT ---
pytesseract.pytesseract.tesseract_cmd = shutil.which("tesseract") or "tesseract"
logger.info(f"‚úÖ Tesseract d√©tect√© : {pytesseract.pytesseract.tesseract_cmd}")

# --- GOOGLE SHEET ---
creds_dict = json.loads(os.getenv("GOOGLE_APPLICATION_CREDENTIALS"))
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)
sheet = client.open_by_key(SPREADSHEET_ID).worksheet("Donn√©es Journali√®res")
logger.info("‚úÖ Connexion Google Sheets r√©ussie")

# --- FASTAPI + LIFESPAN ---
@asynccontextmanager
async def lifespan(app: FastAPI):
    def runner():
        async def start():
            try:
                logger.info("üö¶ Initialisation LIFESPAN ‚Üí Telegram bot")
                await telegram_app.initialize()
                logger.info("‚úÖ Telegram app initialis√©e")

                # üì∏ Handler images
                telegram_app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
                logger.info("üß© Handler photo enregistr√©")

                asyncio.create_task(telegram_app.start())
                logger.info("üöÄ Bot Telegram lanc√© en t√¢che de fond")
                telegram_ready.set()
                async with httpx.AsyncClient() as client:
                    res = await client.post(
                        f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook",
                        data={"url": f"{RAILWAY_URL}/webhook"}
                    )
                    logger.info(f"üîó Webhook enregistr√© ‚Üí {res.status_code} | {res.text}")
            except Exception as e:
                logger.exception("‚ùå √âchec init Telegram")
        asyncio.run(start())
    threading.Thread(target=runner, daemon=True).start()
    yield

app = FastAPI(lifespan=lifespan)
logger.info("üöÄ FastAPI instance d√©clar√©e (avec lifespan)")

@app.get("/")
async def root():
    logger.info("üì° Ping re√ßu sur /")
    return {"status": "Bot op√©rationnel"}

@app.get("/force-webhook")
async def force_webhook():
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook",
                data={"url": f"{RAILWAY_URL}/webhook"}
            )
        logger.info(f"‚úÖ Webhook forc√© : {response.text}")
        return {"webhook_response": response.json()}
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du reset webhook : {e}")
        return {"error": str(e)}

# --- ROUTE WEBHOOK ---
@app.post("/webhook")
async def webhook(req: Request):
    logger.info("üì© Webhook re√ßu ‚Üí traitement en cours...")
    try:
        await telegram_ready.wait()
        raw = await req.body()
        logger.info(f"üßæ Contenu brut re√ßu : {raw[:200]}")
        update = Update.de_json(json.loads(raw), bot)
        logger.info(f"üß† Update re√ßu : {update.to_dict()}")
        await telegram_app.process_update(update)
        return {"ok": True}
    except Exception as e:
        logger.exception("‚ùå Erreur route /webhook")
        return JSONResponse(status_code=500, content={"status": "error", "detail": str(e)})

# --- HANDLERS ---
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("üì∑ Image re√ßue ! Tentative de t√©l√©chargement...")
    try:
        photo_file = await update.message.photo[-1].get_file()
        photo_bytes = await photo_file.download_as_bytearray()
        image = Image.open(io.BytesIO(photo_bytes)).convert("RGB")

        logger.info("üß™ OCR en cours...")
        gray = ImageOps.grayscale(image)
        cropped = gray.crop((0, 0, gray.width, int(gray.height * 0.4)))
        upscaled = cropped.resize((cropped.width * 2, cropped.height * 2))
        text = pytesseract.image_to_string(upscaled)

        logger.info(f"üîç R√©sultat OCR brut :\n{text}")
        await update.message.reply_text("üì∏ Image re√ßue et analys√©e avec succ√®s.")
    except Exception as e:
        logger.exception("‚ùå Erreur lors du traitement de l'image")
        await update.message.reply_text("‚ùå Erreur lors du traitement de l'image.")