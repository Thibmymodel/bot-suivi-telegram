import os
import io
import re
import json
import shutil
import logging
import datetime
from PIL import Image, ImageOps
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from telegram import Update, Bot
from telegram.ext import Application, ContextTypes, MessageHandler, filters
import pytesseract
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import httpx
import asyncio
from contextlib import asynccontextmanager

# --- LOGS ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- ENV ---
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
RAILWAY_URL = os.getenv("RAILWAY_PUBLIC_URL", "http://localhost:8000").rstrip("/")
GROUP_ID = int(os.getenv("TELEGRAM_GROUP_ID"))
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
logger.info(f"üîë BOT_TOKEN: {'PR√âSENT' if BOT_TOKEN else 'ABSENT'}")
logger.info(f"üîë RAILWAY_URL: {RAILWAY_URL}")
logger.info(f"üîë GROUP_ID: {GROUP_ID}")
logger.info(f"üîë SPREADSHEET_ID: {SPREADSHEET_ID}")

# --- TELEGRAM ---
telegram_app = Application.builder().token(BOT_TOKEN).build()
bot = telegram_app.bot
telegram_ready = asyncio.Event()

# --- FASTAPI ---
@asynccontextmanager
async def lifespan(app: FastAPI):
    logger.info("üîÑ Entr√©e dans lifespan()...")
    await telegram_app.initialize()
    logger.info("‚úÖ Telegram app initialis√©e")
    await telegram_app.start()
    logger.info("‚úÖ Telegram app d√©marr√©e")
    telegram_ready.set()
    async with httpx.AsyncClient() as client:
        res = await client.post(
            f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook",
            data={"url": f"{RAILWAY_URL}/webhook"}
        )
        logger.info(f"üîó Webhook setWebhook() ‚Üí Status: {res.status_code} | Body: {res.text}")
    yield
    await telegram_app.stop()
    logger.info("üõë Telegram app arr√™t√©e")

app = FastAPI(lifespan=lifespan)
logger.info("üöÄ FastAPI instance d√©clar√©e (hors event)")

@app.get("/force-webhook")
async def force_webhook():
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook",
                data={"url": f"{RAILWAY_URL}/webhook"}
            )
        logger.info(f"‚úÖ Webhook forc√© : {response.text}")
        return {"webhook_response": response.json()}
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du reset webhook : {e}")
        return {"error": str(e)}

@app.get("/")
def root():
    logger.info("üì° Ping re√ßu sur /")
    return {"status": "Bot op√©rationnel"}

# --- TESSERACT ---
pytesseract.pytesseract.tesseract_cmd = shutil.which("tesseract") or "tesseract"
logger.info(f"‚úÖ Tesseract d√©tect√© : {pytesseract.pytesseract.tesseract_cmd}")

# --- GOOGLE SHEET ---
creds_dict = json.loads(os.getenv("GOOGLE_APPLICATION_CREDENTIALS"))
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)
sheet = client.open_by_key(SPREADSHEET_ID).worksheet("Donn√©es Journali√®res")
logger.info("‚úÖ Connexion Google Sheets r√©ussie")

# --- UTILS ---
# (Pas modifi√© pour le moment)

# --- HANDLER ---
# (Pas modifi√© pour le moment)

# --- ROUTE WEBHOOK ---
@app.post("/webhook")
async def webhook(req: Request):
    logger.info("üì© Webhook re√ßu ‚Üí traitement en cours...")
    try:
        await telegram_ready.wait()
        raw = await req.body()
        logger.info(f"üßæ Contenu brut re√ßu : {raw[:200]}")
        update = Update.de_json(json.loads(raw), bot)
        logger.info(f"üß† Update re√ßu : {update.to_dict()}")
        await telegram_app.process_update(update)
        return {"ok": True}
    except Exception as e:
        logger.exception("‚ùå Erreur route /webhook")
        return JSONResponse(status_code=500, content={"status": "error", "detail": str(e)})

# --- HANDLERS ---
# (Pas modifi√© pour le moment)