import os
import io
import re
import json
import shutil
import logging
import datetime
from difflib import get_close_matches
from PIL import Image, ImageOps, ImageEnhance, ImageFilter
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
from telegram import Update, Bot, Message
from telegram.ext import Application, ContextTypes, MessageHandler, filters
import pytesseract
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import httpx
import asyncio
import threading

# --- LOGS ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- ENV ---
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
RAILWAY_URL = os.getenv("RAILWAY_PUBLIC_URL", "http://localhost:8000").rstrip("/")
GROUP_ID = int(os.getenv("TELEGRAM_GROUP_ID"))
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
logger.info(f"üîë BOT_TOKEN: {'PR√âSENT' if BOT_TOKEN else 'ABSENT'}")
logger.info(f"üîë RAILWAY_URL: {RAILWAY_URL}")
logger.info(f"üîë GROUP_ID: {GROUP_ID}")
logger.info(f"üîë SPREADSHEET_ID: {SPREADSHEET_ID}")

# --- TELEGRAM ---
telegram_app = Application.builder().token(BOT_TOKEN).build()
bot = telegram_app.bot
telegram_ready = asyncio.Event()

# --- TESSERACT ---
pytesseract.pytesseract.tesseract_cmd = shutil.which("tesseract") or "tesseract"
logger.info(f"‚úÖ Tesseract d√©tect√© : {pytesseract.pytesseract.tesseract_cmd}")

# --- GOOGLE SHEET ---
creds_dict = json.loads(os.getenv("GOOGLE_APPLICATION_CREDENTIALS"))
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)
sheet = client.open_by_key(SPREADSHEET_ID).worksheet("Donn√©es Journali√®res")
logger.info("‚úÖ Connexion Google Sheets r√©ussie")

# --- DOUBLONS ---
already_processed = set()
message_counter = {}

# --- CHARGEMENT DES HANDLES ---
try:
    with open("known_handles.json", "r", encoding="utf-8") as f:
        KNOWN_HANDLES = json.load(f)
    logger.info("üìÇ known_handles.json charg√© avec succ√®s")
except Exception as e:
    KNOWN_HANDLES = {}
    logger.warning(f"‚ö†Ô∏è √âchec chargement known_handles.json : {e}")

def corriger_username(username_ocr: str, reseau: str) -> str:
    handles = KNOWN_HANDLES.get(reseau.lower(), [])
    username_ocr_clean = username_ocr.strip().encode("utf-8", "ignore").decode()
    candidats = get_close_matches(username_ocr_clean.lower(), handles, n=1, cutoff=0.6)
    if candidats:
        logger.info(f"üîÅ Correction OCR : '{username_ocr}' ‚Üí '{candidats[0]}'")
        return candidats[0]
    return username_ocr

async def get_general_topic_id(bot: Bot) -> int:
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getForumTopicList?chat_id={GROUP_ID}"
    async with httpx.AsyncClient() as client:
        response = await client.get(url)
        data = response.json()
        if data.get("ok"):
            topics = data["result"].get("topics", [])
            for topic in topics:
                if topic.get("name", "").lower() == "g√©n√©ral":
                    return topic["message_thread_id"]
    return None

# (le reste du code ne change pas)
